# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  frontend:
    build:
      context: ../GO_Htmx_test
    ports: 
      - 42069:42069
    environment:
      BackendHost: server
      BackendPort: 20002
    depends_on:
      server:
        condition: service_started
    
  server:
    build:
      context: .
      target: final
    ports:
      - 20002:20002
    environment:
      DBUser: gopher
      DBPassword: golang1234
      DBPort: 5432
      DBHost: db

    depends_on:
      db:
        condition: service_healthy

  # The commented out section below is an example of how to define a PostgreSQL
  # database that your application can use. `depends_on` tells Docker Compose to
  # start the database before your application. The `db-data` volume persists the
  # database data between container restarts. The `db-password` secret is used
  # to set the database password. You must create `db/password.txt` and add
  # a password of your choosing to it before running `docker compose up`.
  db:
    build: ./DB
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: gopher
      POSTGRES_PASSWORD: golang1234
      POSTGRES_DB: todo
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
