// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: models/todo.proto

package TodoGrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ToDo_CreateTodoService_FullMethodName  = "/TodoGrpc.toDo/createTodoService"
	ToDo_DeleteTodoService_FullMethodName  = "/TodoGrpc.toDo/deleteTodoService"
	ToDo_GetAllTodosService_FullMethodName = "/TodoGrpc.toDo/getAllTodosService"
	ToDo_GetTodoByIDService_FullMethodName = "/TodoGrpc.toDo/getTodoByIDService"
	ToDo_UpdateTodoService_FullMethodName  = "/TodoGrpc.toDo/updateTodoService"
)

// ToDoClient is the client API for ToDo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToDoClient interface {
	CreateTodoService(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodoResponse, error)
	DeleteTodoService(ctx context.Context, in *TodoQuery, opts ...grpc.CallOption) (*Todo, error)
	GetAllTodosService(ctx context.Context, in *Null, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Todo], error)
	GetTodoByIDService(ctx context.Context, in *TodoQuery, opts ...grpc.CallOption) (*Todo, error)
	UpdateTodoService(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Todo, error)
}

type toDoClient struct {
	cc grpc.ClientConnInterface
}

func NewToDoClient(cc grpc.ClientConnInterface) ToDoClient {
	return &toDoClient{cc}
}

func (c *toDoClient) CreateTodoService(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TodoResponse)
	err := c.cc.Invoke(ctx, ToDo_CreateTodoService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoClient) DeleteTodoService(ctx context.Context, in *TodoQuery, opts ...grpc.CallOption) (*Todo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Todo)
	err := c.cc.Invoke(ctx, ToDo_DeleteTodoService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoClient) GetAllTodosService(ctx context.Context, in *Null, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Todo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ToDo_ServiceDesc.Streams[0], ToDo_GetAllTodosService_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Null, Todo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ToDo_GetAllTodosServiceClient = grpc.ServerStreamingClient[Todo]

func (c *toDoClient) GetTodoByIDService(ctx context.Context, in *TodoQuery, opts ...grpc.CallOption) (*Todo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Todo)
	err := c.cc.Invoke(ctx, ToDo_GetTodoByIDService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoClient) UpdateTodoService(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Todo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Todo)
	err := c.cc.Invoke(ctx, ToDo_UpdateTodoService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToDoServer is the server API for ToDo service.
// All implementations must embed UnimplementedToDoServer
// for forward compatibility.
type ToDoServer interface {
	CreateTodoService(context.Context, *TodoRequest) (*TodoResponse, error)
	DeleteTodoService(context.Context, *TodoQuery) (*Todo, error)
	GetAllTodosService(*Null, grpc.ServerStreamingServer[Todo]) error
	GetTodoByIDService(context.Context, *TodoQuery) (*Todo, error)
	UpdateTodoService(context.Context, *Todo) (*Todo, error)
	mustEmbedUnimplementedToDoServer()
}

// UnimplementedToDoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedToDoServer struct{}

func (UnimplementedToDoServer) CreateTodoService(context.Context, *TodoRequest) (*TodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodoService not implemented")
}
func (UnimplementedToDoServer) DeleteTodoService(context.Context, *TodoQuery) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodoService not implemented")
}
func (UnimplementedToDoServer) GetAllTodosService(*Null, grpc.ServerStreamingServer[Todo]) error {
	return status.Errorf(codes.Unimplemented, "method GetAllTodosService not implemented")
}
func (UnimplementedToDoServer) GetTodoByIDService(context.Context, *TodoQuery) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoByIDService not implemented")
}
func (UnimplementedToDoServer) UpdateTodoService(context.Context, *Todo) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodoService not implemented")
}
func (UnimplementedToDoServer) mustEmbedUnimplementedToDoServer() {}
func (UnimplementedToDoServer) testEmbeddedByValue()              {}

// UnsafeToDoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToDoServer will
// result in compilation errors.
type UnsafeToDoServer interface {
	mustEmbedUnimplementedToDoServer()
}

func RegisterToDoServer(s grpc.ServiceRegistrar, srv ToDoServer) {
	// If the following call pancis, it indicates UnimplementedToDoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ToDo_ServiceDesc, srv)
}

func _ToDo_CreateTodoService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServer).CreateTodoService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToDo_CreateTodoService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServer).CreateTodoService(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDo_DeleteTodoService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServer).DeleteTodoService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToDo_DeleteTodoService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServer).DeleteTodoService(ctx, req.(*TodoQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDo_GetAllTodosService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Null)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ToDoServer).GetAllTodosService(m, &grpc.GenericServerStream[Null, Todo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ToDo_GetAllTodosServiceServer = grpc.ServerStreamingServer[Todo]

func _ToDo_GetTodoByIDService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServer).GetTodoByIDService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToDo_GetTodoByIDService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServer).GetTodoByIDService(ctx, req.(*TodoQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDo_UpdateTodoService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServer).UpdateTodoService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToDo_UpdateTodoService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServer).UpdateTodoService(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

// ToDo_ServiceDesc is the grpc.ServiceDesc for ToDo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToDo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TodoGrpc.toDo",
	HandlerType: (*ToDoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createTodoService",
			Handler:    _ToDo_CreateTodoService_Handler,
		},
		{
			MethodName: "deleteTodoService",
			Handler:    _ToDo_DeleteTodoService_Handler,
		},
		{
			MethodName: "getTodoByIDService",
			Handler:    _ToDo_GetTodoByIDService_Handler,
		},
		{
			MethodName: "updateTodoService",
			Handler:    _ToDo_UpdateTodoService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getAllTodosService",
			Handler:       _ToDo_GetAllTodosService_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "models/todo.proto",
}
